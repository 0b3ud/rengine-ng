services:
  db:
    image: "postgres:12.3-alpine"
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - PGUSER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rengine_network
    ports:
      - "127.0.0.1:5432:5432"

  redis:
    image: "redis:alpine"
    restart: unless-stopped
    hostname: redis
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rengine_network

  celery:
    build:
      context: docker
      dockerfile: celery/Dockerfile
    restart: unless-stopped
    entrypoint: /entrypoint-dev.sh
    volumes:
      - ./web:/home/rengine/rengine
      - ./docker/celery/entrypoint-dev.sh:/entrypoint-dev.sh:ro
      - scan_results:/home/rengine/scan_results
    environment:
      - CELERY_DEBUG=1
      - CELERY_REMOTE_DEBUG=0
      - CELERY_REMOTE_DEBUG_PORT=5679
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - DOMAIN_NAME=${DOMAIN_NAME}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - MAX_CONCURRENCY=${MAX_CONCURRENCY}
      - MIN_CONCURRENCY=${MIN_CONCURRENCY}
    healthcheck:
      test: ["CMD", "poetry", "-C", "/home/rengine", "run", "celery","-A","reNgine","status"]
      interval: 10s
      timeout: 10s
      retries: 60
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rengine_network
    ports:
      - "127.0.0.1:5679:5679"

  celery-beat:
    build:
      context: docker
      dockerfile: celery/Dockerfile
    restart: unless-stopped
    entrypoint: /entrypoint-dev.sh
    volumes:
      - ./web:/home/rengine/rengine
      - ./docker/beat/entrypoint-dev.sh:/entrypoint-dev.sh:ro
      - scan_results:/home/rengine/scan_results
    environment:
      - CELERY_DEBUG=1
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - DOMAIN_NAME=${DOMAIN_NAME}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - MAX_CONCURRENCY=${MAX_CONCURRENCY}
      - MIN_CONCURRENCY=${MIN_CONCURRENCY}
    depends_on:
      celery:
        condition: service_healthy
    networks:
      - rengine_network

  web:
    build:
      context: docker
      dockerfile: web/Dockerfile
    restart: unless-stopped
    entrypoint: /entrypoint-dev.sh
    volumes:
      - ./web:/home/rengine/app
      - ./docker/web/entrypoint-dev.sh:/entrypoint-dev.sh:ro
      - scan_results:/home/rengine/scan_results
    environment:
      - UI_DEBUG=1
      - UI_REMOTE_DEBUG=0
      - UI_REMOTE_DEBUG_PORT=5678
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - DOMAIN_NAME=${DOMAIN_NAME}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      # THIS IS A MUST FOR CHECKING UPDATE, EVERYTIME A COMMIT IS MERGED INTO
      # MASTER, UPDATE THIS!!! MAJOR.MINOR.PATCH https://semver.org/
      - RENGINE_CURRENT_VERSION='2.1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "http://localhost:8000"]
      interval: 10s
      timeout: 10s
      retries: 10
    depends_on:
      db:
        condition: service_healthy
      celery:
        condition: service_healthy
      celery-beat:
        condition: service_started
    networks:
      rengine_network:
        aliases:
          - rengine
    ports:
      - "8000:8000"
      - "127.0.0.1:5678:5678"

  proxy:
    restart: always
    image: nginx:alpine
    volumes:
      - ./config/nginx/rengine.conf:/etc/nginx/conf.d/rengine.conf:ro
      - static_volume:/usr/src/app/staticfiles
      - scan_results:/usr/src/scan_results
    depends_on:
      web:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    secrets:
      - source: proxy.ca
        target: /etc/nginx/certs/rengine_chain.pem
      - source: proxy.cert
        target: /etc/nginx/certs/rengine.pem
      - source: proxy.key
        target: /etc/nginx/certs/rengine_rsa.key
    ports:
      - 8082:8082/tcp
      - 443:443/tcp

  ollama:
    image: ollama/ollama
    restart: unless-stopped
    container_name: ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - rengine_network
    # command: ["ollama", "run", "llama2-uncensored"]

networks:
  rengine_network:

volumes:
  tool_config:
  postgres_data:
  gf_patterns:
  nuclei_templates:
  github_repos:
  wordlist:
  scan_results:
  static_volume:

secrets:
  proxy.ca:
    file: ./secrets/certs/rengine_chain.pem
  proxy.key:
    file: ./secrets/certs/rengine_rsa.key
  proxy.cert:
    file: ./secrets/certs/rengine.pem
